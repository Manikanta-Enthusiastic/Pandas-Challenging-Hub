{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Manikanta-Enthusiastic/Pandas-Challenging-Hub/blob/Python-Pandas-Playground/Python-Pandas-Problems\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jqaN5wClF0PY",
        "outputId": "e374da38-1747-46f8-e53d-611e4f119905"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[0 1]\n",
            " [2 3]\n",
            " [4 5]]\n",
            "[[10 10 10]\n",
            " [10 10 10]]\n",
            "[[10 10 10]\n",
            " [50 50 50]\n",
            " [90 90 90]]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "array_1 = np.arange(6).reshape(3,2)\n",
        "print(array_1)\n",
        "array_2 = np.full((3,2), 10)\n",
        "print(array_2.T)\n",
        "array_3 = array_2.T\n",
        "print (np.dot(array_1, array_3))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "KhpxajUcXUQl",
        "outputId": "4d537250-c2ed-4566-d3da-52b1ff81e7e4"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ],
            "text/plain": [
              "0    1\n",
              "1    2\n",
              "2    3\n",
              "3    4\n",
              "4    5\n",
              "dtype: int64"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "list = [1,2,3,4,5]\n",
        "series_1= pd.Series(list)\n",
        "series_1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0pS4pk2XVYym",
        "outputId": "05e36ad9-8e64-4609-87c4-71402bc0466d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   user_id        created_at  company_id  language      activated_at   state\n",
            "0        0  01-01-2013 20:59        5737   english  01-01-2013 21:01  active\n",
            "1        3  01-01-2013 18:40        2800    german  01-01-2013 18:42  active\n",
            "2        4  01-01-2013 14:37        5110    indian  01-01-2013 14:39  active\n",
            "3        6  01-01-2013 18:37       11699   english  01-01-2013 18:38  active\n",
            "4        7  01-01-2013 16:19        4765    french  01-01-2013 16:20  active\n",
            "5        8  01-01-2013 04:38        2698    french  01-01-2013 04:40  active\n",
            "6       11  01-01-2013 08:07        3745   english  01-01-2013 08:09  active\n",
            "7       13  02-01-2013 12:27        4025   english  02-01-2013 12:29  active\n",
            "8       15  02-01-2013 15:39        4259   english  02-01-2013 15:41  active\n",
            "9       17  02-01-2013 10:56        5025  japanese  02-01-2013 10:57  active\n",
            "['english' 'german' 'indian' 'french' 'japanese']\n",
            "    user_id        created_at  company_id language      activated_at   state\n",
            "0         0  01-01-2013 20:59        5737  english  01-01-2013 21:01  active\n",
            "3         6  01-01-2013 18:37       11699  english  01-01-2013 18:38  active\n",
            "6        11  01-01-2013 08:07        3745  english  01-01-2013 08:09  active\n",
            "7        13  02-01-2013 12:27        4025  english  02-01-2013 12:29  active\n",
            "8        15  02-01-2013 15:39        4259  english  02-01-2013 15:41  active\n",
            "10       19  02-01-2013 09:54         326  english  02-01-2013 09:55  active\n",
            "12       21  02-01-2013 09:29        2606  english  02-01-2013 09:30  active\n",
            "15       30  03-01-2013 08:28        4148  english  03-01-2013 08:29  active\n",
            "17       33  03-01-2013 12:16       10768  english  03-01-2013 12:18  active\n",
            "18       35  03-01-2013 16:06        1891  english  03-01-2013 16:07  active\n",
            "company_id\n",
            "1     278\n",
            "2     113\n",
            "3      94\n",
            "4      47\n",
            "6      45\n",
            "5      41\n",
            "8      31\n",
            "7      28\n",
            "9      26\n",
            "15     22\n",
            "14     21\n",
            "11     21\n",
            "10     17\n",
            "13     14\n",
            "12     13\n",
            "18     12\n",
            "Name: user_id, dtype: int64\n",
            "Axes(0.1275,0.11;0.77x0.77)\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "file_path = '/content/users.csv'\n",
        "df = pd.read_csv(file_path)\n",
        "columns_df = df[['company_id', 'user_id', 'language']]\n",
        "unique_languages = df['language'].unique()\n",
        "filtered_df = df[df['language'] == 'english']\n",
        "cummulative_df = filtered_df.groupby('company_id')['user_id'].count()\n",
        "top_10_companies = cummulative_df.sort_values(ascending=False).head(16)\n",
        "grouped_df = top_10_companies.plot(kind='pie', autopct='%1.1f%%', figsize=(8, 8))\n",
        "#grouped_df = filtered_df.groupby('company_id')['user_id'].count().plot(kind='bar')\n",
        "print(df.head(10))\n",
        "print(unique_languages[:5])\n",
        "print(filtered_df.head(10))\n",
        "print(top_10_companies.head(16))\n",
        "print(grouped_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "cPBmjgfZWCTQ",
        "outputId": "acfae3d0-1b72-47d6-827e-b78e44671770"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   age     sex   bmi  children smoker     region  expenses\n",
            "0   19  female  27.9         0    yes  southwest  16884.92\n",
            "1   18    male  33.8         1     no  southeast   1725.55\n",
            "2   28    male  33.0         3     no  southeast   4449.46\n",
            "3   33    male  22.7         0     no  northwest  21984.47\n",
            "4   32    male  28.9         0     no  northwest   3866.86\n",
            "      region  Average_Expenses\n",
            "0  southwest      12346.937908\n",
            "1  northwest      12417.575169\n",
            "2  northeast      13406.384691\n",
            "3  southeast      14735.411538\n",
            "      age     sex   bmi  children smoker     region  expenses  \\\n",
            "0      19  female  27.9         0    yes  southwest  16884.92   \n",
            "1      18    male  33.8         1     no  southeast   1725.55   \n",
            "2      28    male  33.0         3     no  southeast   4449.46   \n",
            "3      33    male  22.7         0     no  northwest  21984.47   \n",
            "4      32    male  28.9         0     no  northwest   3866.86   \n",
            "...   ...     ...   ...       ...    ...        ...       ...   \n",
            "1333   50    male  31.0         3     no  northwest  10600.55   \n",
            "1334   18  female  31.9         0     no  northeast   2205.98   \n",
            "1335   18  female  36.9         0     no  southeast   1629.83   \n",
            "1336   21  female  25.8         0     no  southwest   2007.95   \n",
            "1337   61  female  29.1         0    yes  northwest  29141.36   \n",
            "\n",
            "      Average_Expenses  \n",
            "0         12346.937908  \n",
            "1         14735.411538  \n",
            "2         14735.411538  \n",
            "3         12417.575169  \n",
            "4         12417.575169  \n",
            "...                ...  \n",
            "1333      12417.575169  \n",
            "1334      13406.384691  \n",
            "1335      14735.411538  \n",
            "1336      12346.937908  \n",
            "1337      12417.575169  \n",
            "\n",
            "[1338 rows x 8 columns]\n"
          ]
        },
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"#print(rows_with_missing_region)\",\n  \"rows\": 1338,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 18,\n        \"max\": 64,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          21,\n          45,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.098382190003366,\n        \"min\": 16.0,\n        \"max\": 53.1,\n        \"num_unique_values\": 275,\n        \"samples\": [\n          28.6,\n          20.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"southeast\",\n          \"northeast\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"expenses\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12110.011239706457,\n        \"min\": 1121.87,\n        \"max\": 63770.43,\n        \"num_unique_values\": 1337,\n        \"samples\": [\n          8688.86,\n          5708.87\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Average_Expenses\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 986.3540137243454,\n        \"min\": 12346.937907692307,\n        \"max\": 14735.411538461538,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          14735.411538461538,\n          13406.384691358024\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-f48a43be-bc0e-4c61-b422-d986554b9bc8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>expenses</th>\n",
              "      <th>Average_Expenses</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>female</td>\n",
              "      <td>27.9</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>southwest</td>\n",
              "      <td>16884.92</td>\n",
              "      <td>12346.937908</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>male</td>\n",
              "      <td>33.8</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1725.55</td>\n",
              "      <td>14735.411538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>male</td>\n",
              "      <td>33.0</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>4449.46</td>\n",
              "      <td>14735.411538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>male</td>\n",
              "      <td>22.7</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>21984.47</td>\n",
              "      <td>12417.575169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>male</td>\n",
              "      <td>28.9</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>3866.86</td>\n",
              "      <td>12417.575169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1333</th>\n",
              "      <td>50</td>\n",
              "      <td>male</td>\n",
              "      <td>31.0</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>10600.55</td>\n",
              "      <td>12417.575169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1334</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>31.9</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northeast</td>\n",
              "      <td>2205.98</td>\n",
              "      <td>13406.384691</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1335</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>36.9</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1629.83</td>\n",
              "      <td>14735.411538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1336</th>\n",
              "      <td>21</td>\n",
              "      <td>female</td>\n",
              "      <td>25.8</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southwest</td>\n",
              "      <td>2007.95</td>\n",
              "      <td>12346.937908</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1337</th>\n",
              "      <td>61</td>\n",
              "      <td>female</td>\n",
              "      <td>29.1</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>northwest</td>\n",
              "      <td>29141.36</td>\n",
              "      <td>12417.575169</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1338 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f48a43be-bc0e-4c61-b422-d986554b9bc8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f48a43be-bc0e-4c61-b422-d986554b9bc8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f48a43be-bc0e-4c61-b422-d986554b9bc8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-098dbafe-e20a-4a8a-aeff-043dcfa3b3e7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-098dbafe-e20a-4a8a-aeff-043dcfa3b3e7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-098dbafe-e20a-4a8a-aeff-043dcfa3b3e7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "      age     sex   bmi  children smoker     region  expenses  \\\n",
              "0      19  female  27.9         0    yes  southwest  16884.92   \n",
              "1      18    male  33.8         1     no  southeast   1725.55   \n",
              "2      28    male  33.0         3     no  southeast   4449.46   \n",
              "3      33    male  22.7         0     no  northwest  21984.47   \n",
              "4      32    male  28.9         0     no  northwest   3866.86   \n",
              "...   ...     ...   ...       ...    ...        ...       ...   \n",
              "1333   50    male  31.0         3     no  northwest  10600.55   \n",
              "1334   18  female  31.9         0     no  northeast   2205.98   \n",
              "1335   18  female  36.9         0     no  southeast   1629.83   \n",
              "1336   21  female  25.8         0     no  southwest   2007.95   \n",
              "1337   61  female  29.1         0    yes  northwest  29141.36   \n",
              "\n",
              "      Average_Expenses  \n",
              "0         12346.937908  \n",
              "1         14735.411538  \n",
              "2         14735.411538  \n",
              "3         12417.575169  \n",
              "4         12417.575169  \n",
              "...                ...  \n",
              "1333      12417.575169  \n",
              "1334      13406.384691  \n",
              "1335      14735.411538  \n",
              "1336      12346.937908  \n",
              "1337      12417.575169  \n",
              "\n",
              "[1338 rows x 8 columns]"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv('/content/insurance.csv')\n",
        "print(df.head())\n",
        "df_1 = df.groupby('region')['expenses'].mean()\n",
        "avg_reg_exp_1 = df_1.sort_values(ascending = True)\n",
        "avg_reg_exp_2 = avg_reg_exp_1.to_frame().reset_index()\n",
        "avg_reg_exp_3 = avg_reg_exp_2.rename(columns={'expenses':'Average_Expenses'})\n",
        "print(avg_reg_exp_3)\n",
        "print(pd.merge(df, avg_reg_exp_3, on='region', how='inner'))\n",
        "df.join(avg_reg_exp_3.set_index('region'), on='region', how='left')\n",
        "#rows_with_missing_region = df[df['region'].isnull()]\n",
        "#print(rows_with_missing_region)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vjednWgw_5sC",
        "outputId": "d72671f6-efb7-43af-8419-d21770ddc641"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Determinant computed using NumPy: -306.0\n",
            "Determinant computed using LU decomposition: -306.0\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "from scipy.linalg import lu\n",
        "\n",
        "# Define a 3x3 matrix\n",
        "matrix = np.array([[6, 1, 1],\n",
        "                   [4, -2, 5],\n",
        "                   [2, 8, 7]])\n",
        "\n",
        "# Perform LU decomposition\n",
        "P, L, U = lu(matrix)\n",
        "\n",
        "# Compute the determinant\n",
        "# The determinant of P (permutation matrix) is ±1 based on the number of row swaps\n",
        "det_P = np.linalg.det(P)\n",
        "det_L = np.prod(np.diag(L))\n",
        "det_U = np.prod(np.diag(U))\n",
        "det = det_P * det_L * det_U\n",
        "\n",
        "print(\"Determinant computed using NumPy:\", np.linalg.det(matrix))\n",
        "print(\"Determinant computed using LU decomposition:\", det)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R2EIgVlMBAqF",
        "outputId": "d95db3f7-a660-4ec3-b110-5ae93b533aaa"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original matrix:\n",
            "[[ 6  1  1]\n",
            " [ 4 -2  5]\n",
            " [ 2  8  7]]\n",
            "\n",
            "Permutation matrix P:\n",
            "[[1. 0. 0.]\n",
            " [0. 0. 1.]\n",
            " [0. 1. 0.]]\n",
            "\n",
            "Lower triangular matrix L:\n",
            "[[ 1.          0.          0.        ]\n",
            " [ 0.33333333  1.          0.        ]\n",
            " [ 0.66666667 -0.34782609  1.        ]]\n",
            "\n",
            "Upper triangular matrix U:\n",
            "[[6.         1.         1.        ]\n",
            " [0.         7.66666667 6.66666667]\n",
            " [0.         0.         6.65217391]]\n",
            "\n",
            "PA (Permutation matrix multiplied by the original matrix):\n",
            "[[ 6.  1.  1.]\n",
            " [ 2.  8.  7.]\n",
            " [ 4. -2.  5.]]\n",
            "\n",
            "LU (Lower triangular matrix multiplied by the upper triangular matrix):\n",
            "[[ 6.  1.  1.]\n",
            " [ 2.  8.  7.]\n",
            " [ 4. -2.  5.]]\n",
            "Determinant computed using NumPy: -306.0\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "from scipy.linalg import lu\n",
        "\n",
        "# Define the matrix\n",
        "matrix = np.array([[6, 1, 1],\n",
        "                   [4, -2, 5],\n",
        "                   [2, 8, 7]])\n",
        "\n",
        "# Perform LU decomposition\n",
        "P, L, U = lu(matrix)\n",
        "\n",
        "# Print the results\n",
        "print(\"Original matrix:\")\n",
        "print(matrix)\n",
        "\n",
        "print(\"\\nPermutation matrix P:\")\n",
        "print(P)\n",
        "\n",
        "print(\"\\nLower triangular matrix L:\")\n",
        "print(L)\n",
        "\n",
        "print(\"\\nUpper triangular matrix U:\")\n",
        "print(U)\n",
        "\n",
        "# Verify that PA = LU\n",
        "PA = np.dot(P, matrix)\n",
        "LU = np.dot(L, U)\n",
        "print(\"\\nPA (Permutation matrix multiplied by the original matrix):\")\n",
        "print(PA)\n",
        "\n",
        "print(\"\\nLU (Lower triangular matrix multiplied by the upper triangular matrix):\")\n",
        "print(LU)\n",
        "\n",
        "print(\"Determinant computed using NumPy:\", np.linalg.det(matrix))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "MpcCEsYtRtJd",
        "outputId": "d0b3d27e-ab01-4799-97b0-f98f153392c8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   employee_id     name  reports_to  age\n",
            "0            9    Hercy        <NA>   43\n",
            "1            6    Alice           9   41\n",
            "2            4      Bob           9   36\n",
            "3            2  Winston        <NA>   37\n",
            "4            1    Bhanu           6   28\n",
            "5            3     Mani           4   18\n",
            "            reports_count  average_age\n",
            "reports_to                            \n",
            "4                       1         18.0\n",
            "6                       1         28.0\n",
            "9                       2         39.0\n",
            "   employee_id   name  reports_to  age  reports_count  average_age\n",
            "0            9  Hercy        <NA>   43              2         39.0\n",
            "1            6  Alice           9   41              1         28.0\n",
            "2            4    Bob           9   36              1         18.0\n",
            "   employee_id   name  reports_count  average_age\n",
            "0            9  Hercy              2         39.0\n",
            "1            6  Alice              1         28.0\n",
            "2            4    Bob              1         18.0\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "data = [\n",
        "    [9, 'Hercy', None, 43],\n",
        "    [6, 'Alice', 9, 41],\n",
        "    [4, 'Bob', 9, 36],\n",
        "    [2, 'Winston', None, 37],\n",
        "    [1, 'Bhanu', 6, 28],\n",
        "    [3, 'Mani', 4, 18],\n",
        "    [3, 'Mani', 4, 18]\n",
        "]\n",
        "employees = pd.DataFrame(data, columns=['employee_id', 'name', 'reports_to', 'age']).astype({'employee_id':'Int64', 'name':'object', 'reports_to':'Int64', 'age':'Int64'})\n",
        "employees_1 = employees.drop_duplicates()\n",
        "print(employees_1)\n",
        "managers_table = employees_1.groupby('reports_to').agg(reports_count = ('reports_to','count'), average_age=('age','mean'))\n",
        "managers_table[\"average_age\"] = (managers_table[\"average_age\"] + 1e-12).round(0)\n",
        "print(managers_table)\n",
        "merged_df = pd.merge(employees_1, managers_table, left_on='employee_id', right_on='reports_to', how='inner')\n",
        "print(merged_df)\n",
        "result_df = merged_df[['employee_id', 'name', 'reports_count', 'average_age']]\n",
        "print(result_df)\n",
        "#create a plot\n",
        "plt.plot(result_df.employee_id.astype(str), result_df.reports_count, marker='o')\n",
        "plt.show()\n",
        "# Create a bar chart\n",
        "plt.figure(figsize=(8, 6)) # Optional: Adjust figure size\n",
        "plt.bar(result_df.employee_id.astype(str), result_df.reports_count) # Use bar() for bar chart\n",
        "plt.xlabel(\"Manager ID\") # Add x-axis label\n",
        "plt.ylabel(\"Number of Reports\") # Add y-axis label\n",
        "plt.title(\"Number of Reports per Manager\") # Add a title\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cdqp4c9Gi2S1",
        "outputId": "de4d4c22-04dd-43bd-88b5-c921f8fa0efb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original DataFrame:\n",
            "      Name  Age         City\n",
            "0    Alice   25     New York\n",
            "1      Bob   30  Los Angeles\n",
            "2  Charlie   35      Chicago\n",
            "3    Alice   25     New York\n",
            "4    David   40        Miami\n",
            "5      Bob   30  Los Angeles\n",
            "      Name Month   Salary\n",
            "0    Alice  July    25000\n",
            "1      Bob   Nov    30000\n",
            "2  Charlie   Apr    50000\n",
            "3    Alice  July    25000\n",
            "4    David   Dec   100000\n",
            "5      Bob   Feb  1250000\n",
            "\n",
            "Deleted rows:\n",
            "    Name  Age         City\n",
            "3  Alice   25     New York\n",
            "5    Bob   30  Los Angeles\n",
            "    Name Month  Salary\n",
            "3  Alice  July   25000\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Sample data\n",
        "\n",
        "data_1 = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie', 'Alice', 'David', 'Bob'],\n",
        "    'Age': [25, 30, 35, 25, 40, 30],\n",
        "    'City': ['New York', 'Los Angeles', 'Chicago', 'New York', 'Miami', 'Los Angeles']\n",
        "}\n",
        "\n",
        "data_2 = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie', 'Alice', 'David', 'Bob'],\n",
        "    'Month': ['July', 'Nov', 'Apr', 'July', 'Dec', 'Feb'],\n",
        "    'Salary': [25000, 30000, 50000, 25000, 100000, 1250000]\n",
        "}\n",
        "\n",
        "# Create a DataFrame\n",
        "df_1= pd.DataFrame(data_1)\n",
        "df_2= pd.DataFrame(data_2)\n",
        "\n",
        "# Display the original DataFrame\n",
        "print(\"Original DataFrame:\")\n",
        "print(df_1)\n",
        "print(df_2)\n",
        "\n",
        "# Drop duplicates and keep the first occurrence\n",
        "df_deduped_1 = df_1.drop_duplicates(keep='first')\n",
        "df_deduped_2 = df_2.drop_duplicates(keep='first')\n",
        "\n",
        "# Identify the deleted rows\n",
        "deleted_rows_1 = df_1[~df_1.index.isin(df_deduped_1.index)]\n",
        "deleted_rows_2 = df_2[~df_2.index.isin(df_deduped_2.index)]\n",
        "\n",
        "\n",
        "# Display the deleted rows\n",
        "print(\"\\nDeleted rows:\")\n",
        "print(deleted_rows_1)\n",
        "print(deleted_rows_2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "16e8caca",
        "outputId": "bd73e1c1-ca6b-4e40-deb6-469c9a76f13f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2, 3, 4]\n",
            "[0, 1, 2, 3, 4, 5, 6]\n",
            "[4, 5, 6, 7, 8, 9]\n",
            "[0, 2, 4, 6, 8]\n",
            "[1, 4, 7]\n",
            "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n"
          ]
        }
      ],
      "source": [
        "# Slicing a Python list\n",
        "my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "\n",
        "# Get elements from index 2 to 5 (exclusive of index 5)\n",
        "print(my_list[2:5])\n",
        "\n",
        "# Get elements from the beginning to index 7 (exclusive of index 7)\n",
        "print(my_list[:7])\n",
        "\n",
        "# Get elements from index 4 to the end\n",
        "print(my_list[4:])\n",
        "\n",
        "# Get every second element\n",
        "print(my_list[::2])\n",
        "\n",
        "# Get elements from index 1 to 8 with a step of 3\n",
        "print(my_list[1:8:3])\n",
        "\n",
        "# Reverse the list\n",
        "print(my_list[::-1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "53976701",
        "outputId": "4251df7d-ef1f-48c8-9bb3-c6aeb9095d7c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2 3 4]\n",
            "[0 1 2 3 4 5 6]\n",
            "[4 5 6 7 8 9]\n",
            "[0 2 4 6 8]\n",
            "[1 4 7]\n",
            "[9 8 7 6 5 4 3 2 1 0]\n",
            "[1 2 3]\n",
            "[2 5 8]\n",
            "[[1 2]\n",
            " [4 5]]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "# Slicing a NumPy array (1D)\n",
        "my_array = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
        "\n",
        "print(my_array[2:5])\n",
        "print(my_array[:7])\n",
        "print(my_array[4:])\n",
        "print(my_array[::2])\n",
        "print(my_array[1:8:3])\n",
        "print(my_array[::-1])\n",
        "\n",
        "# Slicing a NumPy array (2D)\n",
        "my_2d_array = np.array([[1, 2, 3],\n",
        "                        [4, 5, 6],\n",
        "                        [7, 8, 9]])\n",
        "\n",
        "# Get the first row\n",
        "print(my_2d_array[0, :])\n",
        "\n",
        "# Get the second column\n",
        "print(my_2d_array[:, 1])\n",
        "\n",
        "# Get a sub-array (first two rows, first two columns)\n",
        "print(my_2d_array[:2, :2])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ayfz06PlN5kT",
        "outputId": "7c5b99ad-c7f9-4fb0-b6ea-de0f6915f923"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Original DataFrame:\n",
            "   id  email\n",
            "0   1  john@\n",
            "1   2   bob@\n",
            "2   3  john@\n",
            "3   4   bob@\n",
            "4   5  kent@\n",
            "5   6    cc@\n",
            "6   7  kent@\n",
            "7   8    cc@\n",
            "\n",
            "Sorted DataFrame:\n",
            "   id  email\n",
            "0   1  john@\n",
            "1   2   bob@\n",
            "2   3  john@\n",
            "3   4   bob@\n",
            "4   5  kent@\n",
            "5   6    cc@\n",
            "6   7  kent@\n",
            "7   8    cc@\n",
            "\n",
            "DataFarme after deleting Duplicate emails:\n",
            "   id  email\n",
            "0   1  john@\n",
            "1   2   bob@\n",
            "4   5  kent@\n",
            "5   6    cc@\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "person = {\n",
        "    'id': [1,2,3,4,5,6,7,8],\n",
        "    'email': ['john@',\n",
        "              'bob@',\n",
        "              'john@',\n",
        "              'bob@',\n",
        "              'kent@',\n",
        "              'cc@',\n",
        "              'kent@',\n",
        "              'cc@']\n",
        "\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(person)\n",
        "print(\"\\nOriginal DataFrame:\")\n",
        "print(df)\n",
        "\n",
        "df_sorted = df.sort_values(by = ['id'])\n",
        "print(\"\\nSorted DataFrame:\")\n",
        "print(df_sorted)\n",
        "\n",
        "df_unique= df_sorted.drop_duplicates(subset=['email'], keep='first')\n",
        "print(\"\\nDataFarme after deleting Duplicate emails:\")\n",
        "print(df_unique)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vo3OyNbSH4F4",
        "outputId": "01bf513d-c182-43a5-aaca-111992743fa0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            " # Row at position 0 → index 100:\n",
            "name    Alice\n",
            "age        25\n",
            "Name: 100, dtype: object\n",
            "\n",
            " # age of Alice → 25:\n",
            "30\n",
            "\n",
            " # Row with index label 100:\n",
            "name    Alice\n",
            "age        25\n",
            "Name: 100, dtype: object\n",
            "\n",
            " # age of Alice → 25:\n",
            "25\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\n",
        "    'name': ['Alice', 'Bob', 'Charlie'],\n",
        "    'age': [25, 30, 35]\n",
        "}, index=[100, 101, 102])\n",
        "\n",
        "# iloc → position\n",
        "print(\"\\n # Row at position 0 → index 100:\")\n",
        "print(df.iloc[0])\n",
        "print(\"\\n # age of Alice → 25:\")\n",
        "print(df.iloc[1, 1])\n",
        "\n",
        "# loc → label\n",
        "print(\"\\n # Row with index label 100:\")\n",
        "print(df.loc[100])\n",
        "print(\"\\n # age of Alice → 25:\")\n",
        "print(df.loc[100, 'age'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ANkCqyewTPep",
        "outputId": "0d1557f8-8db6-4d24-e57a-39b0c582b931"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   sell_date     product\n",
            "0 2020-05-30   Headphone\n",
            "1 2020-06-01      Pencil\n",
            "2 2020-06-02        Mask\n",
            "3 2020-05-30  Basketball\n",
            "4 2020-06-01       Bible\n",
            "5 2020-06-02        Mask\n",
            "6 2020-05-30     T-Shirt\n",
            "   sell_date  num_sold                      products\n",
            "0 2020-05-30         3  Basketball,Headphone,T-Shirt\n",
            "1 2020-06-01         2                  Bible,Pencil\n",
            "2 2020-06-02         1                          Mask\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = [['2020-05-30', 'Headphone'],\n",
        "    ['2020-06-01', 'Pencil'],\n",
        "    ['2020-06-02', 'Mask'],\n",
        "    ['2020-05-30', 'Basketball'],\n",
        "    ['2020-06-01', 'Bible'],\n",
        "    ['2020-06-02', 'Mask'],\n",
        "    ['2020-05-30', 'T-Shirt']\n",
        "]\n",
        "\n",
        "activities = pd.DataFrame(data, columns=['sell_date', 'product']).astype({'sell_date':'datetime64[ns]', 'product':'object'})\n",
        "\n",
        "print(activities)\n",
        "\n",
        "#def sorted_unique_products(x):\n",
        "    #return ','.join(sorted(x.unique()))\n",
        "\n",
        "#def num_sold_products(x): return x.nunique()\n",
        "\n",
        "#grouped_products = activities.groupby('sell_date').agg(num_sold = ('product', num_sold_products), products = ('product', sorted_unique_products))\n",
        "\n",
        "grouped_products = (activities\n",
        "                    .groupby('sell_date')\n",
        "                    .agg(\n",
        "                        num_sold = ('product', lambda x: x.nunique()),\n",
        "                        products = ('product', lambda x: ','.join(sorted(x.unique())))\n",
        "                    )\n",
        "                    .reset_index()\n",
        "                    .sort_values(by ='sell_date', ascending= True)\n",
        ")\n",
        "print(grouped_products)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nh8oEl8QRHHX",
        "outputId": "f069cfcf-5390-479f-9ba1-68180f44f412"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Products Table\n",
            "   product_id           product_name product_category\n",
            "0           1     Leetcode Solutions             Book\n",
            "1           2  Jewels of Stringology             Book\n",
            "2           3                     HP           Laptop\n",
            "3           4                 Lenovo           Laptop\n",
            "4           5           Leetcode Kit          T-shirt\n",
            "\n",
            " Orders Table\n",
            "    product_id order_date  unit\n",
            "0            1 2020-02-05    60\n",
            "1            1 2020-02-10    70\n",
            "2            2 2020-01-18    30\n",
            "3            2 2020-02-11    80\n",
            "4            3 2020-02-17     2\n",
            "5            3 2020-02-24     3\n",
            "6            4 2020-03-01    20\n",
            "7            4 2020-03-04    30\n",
            "8            4 2020-03-04    60\n",
            "9            5 2020-02-25    50\n",
            "10           5 2020-02-27    50\n",
            "11           5 2020-03-01    50\n",
            "         product_name  Total_units\n",
            "0  Leetcode Solutions          130\n",
            "1        Leetcode Kit          100\n"
          ]
        }
      ],
      "source": [
        "data_1 = [\n",
        "    [1, 'Leetcode Solutions', 'Book'],\n",
        "    [2, 'Jewels of Stringology', 'Book'],\n",
        "    [3, 'HP', 'Laptop'],\n",
        "    [4, 'Lenovo', 'Laptop'],\n",
        "    [5, 'Leetcode Kit', 'T-shirt']\n",
        "  ]\n",
        "products = pd.DataFrame(data_1, columns=['product_id', 'product_name', 'product_category']).astype({'product_id':'Int64', 'product_name':'object', 'product_category':'object'})\n",
        "\n",
        "data_2 = [\n",
        "    [1, '2020-02-05', 60],\n",
        "    [1, '2020-02-10', 70],\n",
        "    [2, '2020-01-18', 30],\n",
        "    [2, '2020-02-11', 80],\n",
        "    [3, '2020-02-17', 2],\n",
        "    [3, '2020-02-24', 3],\n",
        "    [4, '2020-03-01', 20],\n",
        "    [4, '2020-03-04', 30],\n",
        "    [4, '2020-03-04', 60],\n",
        "    [5, '2020-02-25', 50],\n",
        "    [5, '2020-02-27', 50],\n",
        "    [5, '2020-03-01', 50]\n",
        "  ]\n",
        "orders = pd.DataFrame(data_2, columns=['product_id', 'order_date', 'unit']).astype({'product_id':'Int64', 'order_date':'datetime64[ns]', 'unit':'Int64'})\n",
        "\n",
        "print('\\n Products Table')\n",
        "print(products)\n",
        "print('\\n Orders Table')\n",
        "print(orders)\n",
        "\n",
        "result = (\n",
        "    orders[(orders['order_date'].dt.month == 2) & (orders['order_date'].dt.year == 2020)]\n",
        "    .groupby('product_id', as_index = False).agg(Total_units = ('unit', 'sum'))\n",
        "    .merge(products, left_on='product_id', right_on='product_id', how='left')\n",
        ")\n",
        "print(result[result['Total_units']>=100] [['product_name', 'Total_units']].sort_values(by='Total_units', ascending=False).reset_index(drop=True))\n",
        "\n",
        "\n",
        "#result = (\n",
        "    #orders.query(\"'2020-02-01' <= order_date <= '2020-02-29'\")\n",
        "    #or orders.query(\"order_date >='2020-02-01' and order_date <= '2020-02-29'\")\n",
        "    #.groupby('product_id', as_index=False).agg(Total_units = ('unit', 'sum'))\n",
        "    #.query('Total_units >= 100')  # This is a separate query after aggregation\n",
        "    #.merge(products, on='product_id', how='inner')\n",
        "    #[['product_name', 'Total_units']].sort_values(by='Total_units', ascending=False) )\n",
        "\n",
        "\n",
        "\n",
        "# Filter orders for the month of February\n",
        "#february_orders = orders[(orders['order_date'].dt.month == 2) & (orders['order_date'].dt.year == 2020)]\n",
        "#print('\\n February Orders Table') print(february_orders)\n",
        "\n",
        "#Sum_of_units_df = february_orders.groupby('product_id', as_index=False).agg(Total_units = ('unit', 'sum'))\n",
        "#print('\\n Grouped DataFrame') print(Sum_of_units_df)\n",
        "\n",
        "#merged_df = products.merge(Sum_of_units_df, left_on='product_id', right_on='product_id', how='inner')\n",
        "#print('\\n Merged DataFrame') print(merged_df)\n",
        "\n",
        "#filtered_df = merged_df[merged_df['Total_units'] >= 100]\n",
        "#print ('\\n >100 units') print(filtered_df[['product_name', 'Total_units']].sort_values(by='Total_units', ascending=False))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2xNI_9QdjCCk",
        "outputId": "35c0d8c7-8cef-44d8-9703-7db60fd67c9c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   user_id       name                     mail\n",
            "0        1    Winston     winston@leetcode.com\n",
            "2        3  Annabelle      bella-@leetcode.com\n",
            "3        4      Sally  sally.come@leetcode.com\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "data = [[1, 'Winston', 'winston@leetcode.com'], [2, 'Jonathan', 'jonathanisgreat'], [3, 'Annabelle', 'bella-@leetcode.com'], [4, 'Sally', 'sally.come@leetcode.com'], [5, 'Marwan', 'quarz#2020@leetcode.com'], [6, 'David', 'david69@gmail.com'], [7, 'Shapiro', '.shapo@leetcode.com']]\n",
        "users = pd.DataFrame(data, columns=['user_id', 'name', 'mail']).astype({'user_id':'int64', 'name':'object', 'mail':'object'})\n",
        "\n",
        "valid_users = users[users['mail'].str.match(r'^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode\\.com$')]\n",
        "print(valid_users)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HV4h6BC8sdCt",
        "outputId": "14432d1c-f6e3-4045-bc7e-39e2ace0af86"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    300\n",
            "1    250\n",
            "2    200\n",
            "3    100\n",
            "Name: salary, dtype: int64\n",
            "Second highest salary: 250\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = [[1, 100],[4,250], [2, 200], [3, 300]]\n",
        "employee = pd.DataFrame(data, columns=['id', 'salary'])\n",
        "\n",
        "# Get unique salaries sorted in descending order\n",
        "unique_salaries = employee['salary'].drop_duplicates().sort_values(ascending=False).reset_index(drop=True)\n",
        "\n",
        "print(unique_salaries)\n",
        "# Check and print second highest salary\n",
        "if len(unique_salaries) >= 2:\n",
        "    print(\"Second highest salary:\", unique_salaries.iloc[1])\n",
        "else:\n",
        "    print(\"Second highest salary: None\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ur7-UqYKsUY1",
        "outputId": "7bc095c3-d561-477b-c243-5e2847037347"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "  firstName lastName           city     state\n",
            "0     Allen     Wang           None      None\n",
            "1       Bob    Alice  New York City  New York\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Create Person table\n",
        "data_1 = [[1, 'Wang', 'Allen'], [2, 'Alice', 'Bob']]\n",
        "person = pd.DataFrame(data_1, columns=['personId', 'lastName', 'firstName']).astype({\n",
        "    'personId': 'Int64',\n",
        "    'firstName': 'object',\n",
        "    'lastName': 'object'\n",
        "})\n",
        "\n",
        "# Create Address table\n",
        "data_2 = [[1, 2, 'New York City', 'New York'], [2, 3, 'Leetcode', 'California']]\n",
        "address = pd.DataFrame(data_2, columns=['addressId', 'personId', 'city', 'state']).astype({\n",
        "    'addressId': 'Int64',\n",
        "    'personId': 'Int64',\n",
        "    'city': 'object',\n",
        "    'state': 'object'\n",
        "})\n",
        "\n",
        "# Perform LEFT JOIN\n",
        "join_df = person.merge(address, on='personId', how='left')\n",
        "\n",
        "# Select desired columns and replace NaN with None\n",
        "result_df = join_df[['firstName', 'lastName', 'city', 'state']]\n",
        "result_df = result_df.where(pd.notnull(result_df), None)\n",
        "\n",
        "# Display final result\n",
        "print(result_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ICUmhKJ0vmh8",
        "outputId": "294d7015-a7eb-4614-bd60-c3abf4033f45"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   id_x name_x  salary  departmentId  id_y name_y\n",
            "0     1    Joe   85000             1     1     IT\n",
            "1     2  Henry   80000             2     2  Sales\n",
            "2     3    Sam   60000             2     2  Sales\n",
            "3     4    Max   90000             1     1     IT\n",
            "4     5  Janet   69000             1     1     IT\n",
            "5     6  Randy   85000             1     1     IT\n",
            "6     7   Will   70000             1     1     IT\n",
            "  Department Employee  Salary\n",
            "3         IT      Max   90000\n",
            "0         IT      Joe   85000\n",
            "5         IT    Randy   85000\n",
            "6         IT     Will   70000\n",
            "1      Sales    Henry   80000\n",
            "2      Sales      Sam   60000\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "data = [[1, 'Joe', 85000, 1], [2, 'Henry', 80000, 2], [3, 'Sam', 60000, 2], [4, 'Max', 90000, 1], [5, 'Janet', 69000, 1], [6, 'Randy', 85000, 1], [7, 'Will', 70000, 1]]\n",
        "employee = pd.DataFrame(data, columns=['id', 'name', 'salary', 'departmentId']).astype({'id':'Int64', 'name':'object', 'salary':'Int64', 'departmentId':'Int64'})\n",
        "data = [[1, 'IT'], [2, 'Sales']]\n",
        "department = pd.DataFrame(data, columns=['id', 'name']).astype({'id':'Int64', 'name':'object'})\n",
        "\n",
        "\n",
        "# Merge employee and department data\n",
        "merged_df = employee.merge(department, left_on='departmentId', right_on='id', how='left')\n",
        "\n",
        "print(merged_df)\n",
        "# Rank employees within each department based on salary (descending)\n",
        "merged_df['rank'] = merged_df.groupby('name_y')['salary'].rank(method='dense', ascending=False)\n",
        "\n",
        "# Filter for top 3 employees (including ties)\n",
        "top_employees = merged_df[merged_df['rank'] <= 3]\n",
        "\n",
        "# Select and rename columns\n",
        "result = top_employees[['name_y', 'name_x', 'salary']].rename(columns={'name_y': 'Department', 'name_x': 'Employee', 'salary': 'Salary'})\n",
        "\n",
        "# Sort by department and salary for better readability\n",
        "result = result.sort_values(by=['Department', 'Salary'], ascending=[True, False])\n",
        "\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "def create_employee_df():\n",
        "    data = [\n",
        "        [1, 'Joe', 85000, 1],\n",
        "        [2, 'Henry', 80000, 2],\n",
        "        [3, 'Sam', 60000, 2],\n",
        "        [4, 'Max', 90000, 1],\n",
        "        [5, 'Janet', 69000, 1],\n",
        "        [6, 'Randy', 85000, 1],\n",
        "        [7, 'Will', 70000, 1]\n",
        "    ]\n",
        "    return pd.DataFrame(data, columns=['id', 'name', 'salary', 'departmentId']).astype({\n",
        "        'id': 'Int64',\n",
        "        'name': 'object',\n",
        "        'salary': 'Int64',\n",
        "        'departmentId': 'Int64'\n",
        "    })\n",
        "\n",
        "def create_department_df():\n",
        "    data = [\n",
        "        [1, 'IT'],\n",
        "        [2, 'Sales']\n",
        "    ]\n",
        "    return pd.DataFrame(data, columns=['id', 'name']).astype({\n",
        "        'id': 'Int64',\n",
        "        'name': 'object'\n",
        "    })\n",
        "\n",
        "def merge_employee_department(employee_df, department_df):\n",
        "    return employee_df.merge(department_df, left_on='departmentId', right_on='id', how='left')\n",
        "\n",
        "def rank_top_3_employees(df):\n",
        "    df['rank'] = df.groupby('name_y')['salary'].rank(method='dense', ascending=False)\n",
        "    top_employees = df[df['rank'] <= 3]\n",
        "    return top_employees\n",
        "\n",
        "def format_result(df):\n",
        "    result = df[['name_y', 'name_x', 'salary']].rename(columns={\n",
        "        'name_y': 'Department',\n",
        "        'name_x': 'Employee',\n",
        "        'salary': 'Salary'\n",
        "    })\n",
        "    return result.sort_values (by=['Department', 'Salary'], ascending=[True, False])\n",
        "\n",
        "def main():\n",
        "    employee_df = create_employee_df()\n",
        "    department_df = create_department_df()\n",
        "    merged_df = merge_employee_department(employee_df, department_df)\n",
        "    top_employees_df = rank_top_3_employees(merged_df)\n",
        "    final_result = format_result(top_employees_df)\n",
        "    print(final_result)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5X3aLL9Zzbkb",
        "outputId": "9268aa1e-b74a-404e-c7f3-f2144bda062e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Department Employee  Salary\n",
            "3         IT      Max   90000\n",
            "0         IT      Joe   85000\n",
            "5         IT    Randy   85000\n",
            "6         IT     Will   70000\n",
            "1      Sales    Henry   80000\n",
            "2      Sales      Sam   60000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "data = [[1, 'Joe', 70000, 3], [2, 'Henry', 80000, 4], [3, 'Sam', 60000, None], [4, 'Max', 90000, None]]\n",
        "employee = pd.DataFrame(data, columns=['id', 'name', 'salary', 'managerId']).astype({'id':'Int64', 'name':'object', 'salary':'Int64', 'managerId':'Int64'})\n",
        "\n",
        "def get_high_earners(df):\n",
        "    return (\n",
        "        df.merge(df, left_on='managerId', right_on='id', how='left')\n",
        "        .rename(columns={\n",
        "            'name_x': 'Employee', 'name_y': 'Manager',\n",
        "            'salary_x': 'EmployeeSalary', 'salary_y': 'ManagerSalary',\n",
        "            'id_x': 'EmployeeId', 'id_y': 'ManagerId'\n",
        "        })\n",
        "        .loc[lambda df: df['EmployeeSalary'] > df['ManagerSalary']]\n",
        "        [['Employee', 'EmployeeSalary', 'Manager', 'ManagerSalary']]\n",
        "    )\n",
        "\n",
        "def main():\n",
        "    result = get_high_earners(employee)\n",
        "    print(result)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "etJmqEaTqJOj",
        "outputId": "63ed7fce-f825-447d-8e13-0184e5e04c6b"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Employee  EmployeeSalary Manager  ManagerSalary\n",
            "0      Joe           70000     Sam          60000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "result = (\n",
        "    employee.merge(employee, left_on='managerId', right_on='id', how='left')\n",
        "    .rename(columns={'name_x': 'Employee', 'name_y': 'Manager', 'salary_x': 'EmployeeSalary', 'salary_y': 'ManagerSalary', 'id_x': 'EmployeeId', 'id_y': 'ManagerId'})\n",
        "    .loc[lambda df: df['EmployeeSalary'] > df['ManagerSalary']]\n",
        "    [['Employee']]\n",
        ")\n",
        "\n",
        "print(result)"
      ],
      "metadata": {
        "id": "y-ouFFxrxgV3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "join_df = employee.merge(employee, left_on='managerId', right_on='id',how='left')\n",
        "result_df = join_df.rename(columns={'name_x': 'Employee', 'name_y': 'Manager', 'salary_x': 'EmployeeSalary', 'salary_y': 'ManagerSalary', 'id_x': 'EmployeeId', 'id_y': 'ManagerId'})\n",
        "salary_df = result_df[result_df['EmployeeSalary'] > result_df['ManagerSalary']]\n",
        "result = salary_df[['Employee']]\n",
        "print(result)"
      ],
      "metadata": {
        "id": "F7lFCemMxSbQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "data = [[1, 'a@b.com'], [2, 'c@d.com'], [3, 'a@b.com'], [4, 'c@d.com']]\n",
        "person = pd.DataFrame(data, columns=['id', 'email']).astype({'id':'Int64', 'email':'object'})\n",
        "\n",
        "def no_of_duplicate_emails (df):\n",
        "  return (\n",
        "      df.groupby('email', as_index=False).agg(duplicate = ('email','count'))\n",
        "      .loc[lambda df: df['duplicate'] > 1, ['email']]\n",
        "  )\n",
        "\n",
        "def main():\n",
        "    result = no_of_duplicate_emails(person)\n",
        "    print(result)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LBZ_6Hhi6g_c",
        "outputId": "3d830393-57ff-4376-cb7a-7ae0fd4c74d0"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     email\n",
            "0  a@b.com\n",
            "1  c@d.com\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = [[1, 'Joe'], [2, 'Henry'], [3, 'Sam'], [4, 'Max']]\n",
        "customers = pd.DataFrame(data, columns=['id', 'name']).astype({'id':'Int64', 'name':'object'})\n",
        "data = [[1, 3], [2, 1]]\n",
        "orders = pd.DataFrame(data, columns=['id', 'customerId']).astype({'id':'Int64', 'customerId':'Int64'})\n",
        "\n",
        "def not_ordered_cutsomers():\n",
        "  return (\n",
        "      customers[~customers['id'].isin(orders['customerId'])].rename(columns={'name':'Customers'})\n",
        "  )\n",
        "\n",
        "def main():\n",
        "    result = not_ordered_cutsomers()\n",
        "    print(result)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hFvhWUDUnRL8",
        "outputId": "1f2aa74a-4dd3-44c4-dbc1-4fe1104f193b"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   id Customers\n",
            "1   2     Henry\n",
            "3   4       Max\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "customers.merge(orders, left_on='id', right_on='customerId', how='left')\n",
        "      .loc[lambda df: df['customerId'].isna(), ['name']].rename(columns={'name':'Customers'}).reset_index()"
      ],
      "metadata": {
        "id": "3PGFRH1YqEf2"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1ON53r6npb-c7BMSXmBqKsXfjbJBaOHyy",
      "authorship_tag": "ABX9TyMefl9WHJy+MrHbKv5tCR/v",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}